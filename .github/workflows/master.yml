# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Master

on:
  push:
    # todo rollback line
    branches: [ "main", "issue-5" ]

permissions:
  contents: read

jobs:
  tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3
        uses: actions/setup-python@v3
        with:
          python-version: "3"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -U pytest
  #      - name: Test with pytest
  # todo unlock
  #        if: false
  #        run: |
  #          pytest
  #        env:
  #          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3
      uses: actions/setup-python@v3
      with:
        python-version: "3"
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: Build and push
      uses: docker/build-push-action@v5
      with:
        push: true
        tags: ${{secrets.DOCKERHUB_USERNAME}}/av-summarizer-py:latest
    - name: Install SSH key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan "${{secrets.SSH_HOST}}" >> ~/.ssh/known_hosts
      env:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
    - name: Run commands on server
      run: |
        ssh -o StrictHostKeyChecking=no  av-summarizer-py@${{secrets.SSH_HOST}} 'sh deploy.sh'
      env:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
    - name: Health check
      run: |
        echo "Waiting for 30 seconds before healthcheck"
        sleep 30
        echo "Performing healthcheck..."
        wget --retry-connrefused --waitretry=5 --read-timeout=20 --timeout=15 -t 10 https://${{secrets.APP_URL}}/health -O /dev/null
      shell: bash
